@using System.Security.Claims
@using MyWebtoonWebProject.Web.ViewModels.Comments
@model ApplicationUserCommentsViewModel
@{
    ViewBag.Title = this.User.FindFirstValue(ClaimTypes.Name) + "'s Comments";
}

<div class="row">
    <ul class="card-deck" style="font-family:Arial, Verdana, sans-serif;font-size:16px">
        @foreach (var comment in Model.Comments)
        {
            <li class="card">
                <div class="card-body">
                    <a style="font-weight:bold" asp-controller="Episodes" asp-action="GetEpisode" asp-route-WebtoonNumber="@comment.WebtoonTitleNumber" asp-route-EpisodeNumber="@comment.EpisodeNumber">@comment.WebtoonTitle # @comment.EpisodeNumber</a>
                    <hr />
                    <button onclick="editComment(@comment.CommentNumber)"><i class="fas fa-edit"></i></button>
                    <hr />
                    <p class="card-text"><i class="fas fa-calendar"></i> Created on: @comment.CreatedOn.ToString("dd-MM-yyyy")</p>
                    <input class="" style="display:inline-block;width:220px;height:120px;text-align:center;text-align:justify" id="#@("editCommentInfo" + comment.CommentNumber)" value="@comment.CommentInfo" disabled />
                    <br />
                    <button class="btn btn-outline-primary" onclick="sendEditedComment(@comment.CommentNumber)" style="display : none" id="#@("sendEditButton" + comment.CommentNumber)">Edit</button>
                    <br />
                    <div class="d-md-inline-flex">
                        <p class="card-text"><i class="fas fa-thumbs-up"></i> Likes: @comment.Likes</p>
                        <p class="card-text"><i class="fas fa-thumbs-down"></i> Dislikes: @comment.Dislikes</p>
                    </div>
                    @if (User.Identity.IsAuthenticated)
                    {
                        @if (this.User.FindFirstValue(ClaimTypes.NameIdentifier) == comment.CommentAuthorId)
                        {
                            <button type="button" class="btn btn-danger" data-toggle="modal" data-target="#@("deleteCommentModal" + comment.CommentNumber)">
                                DELETE
                            </button>
                            <!-- Modal -->
                            <div class="modal fade" id="@("deleteCommentModal" + comment.CommentNumber)" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title" id="exampleModalLabel">Delete comment?</h5>
                                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                <span aria-hidden="true">&times;</span>
                                            </button>
                                        </div>
                                        <div class="modal-body">
                                            Are you sure you want to delete this comment?
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                            <button class="btn btn-danger position-relative" onclick="deleteComment(@comment.CommentNumber)">Confirm Delete</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </li>
        }
    </ul>
</div>
<form method="post" id="antiForgeryForm"></form>



@section Scripts{
    <script>
        function deleteComment(commentNumber) {
            var antiForgeryToken = $('#antiForgeryForm input[name=__RequestVerificationToken]').val();
            var data = { commentNumber: commentNumber.toString() }
            $.ajax({
                type: "DELETE",
                url: "/api/Comments",
                data: JSON.stringify(data),
                headers: {
                    "X-CSRF-TOKEN": antiForgeryToken
                },
                success: function (data) {
                    location.reload();
                },
                contentType: 'application/json',
            });
        };

        function editComment(commentNumber) {
            var commentInfo = document.getElementById(`#editCommentInfo${commentNumber}`);
            if (commentInfo.disabled == true) {
                commentInfo.disabled = false;
            }
            else {
                commentInfo.disabled = true;
            }
            var buttonToEdin = document.getElementById(`#sendEditButton${commentNumber}`);
            if (buttonToEdin.style.display == "none") {
                buttonToEdin.style.display = "block";
            }
            else {
                buttonToEdin.style.display = "none";
            }
        };

        function sendEditedComment(commentNumber) {
            var commentInfo = document.getElementById(`#editCommentInfo${commentNumber}`).value;
            var antiForgeryToken = $('#antiForgeryForm input[name=__RequestVerificationToken]').val();
            var data = { commentInfo: commentInfo.toString(), commentNumber: commentNumber.toString() }
            $.ajax({
                type: "PUT",
                url: "/api/Comments",
                data: JSON.stringify(data),
                headers: {
                    "X-CSRF-TOKEN": antiForgeryToken
                },
                success: function (data) {
                    location.reload();
                },
                contentType: 'application/json',
            });
        };
    </script>
}
